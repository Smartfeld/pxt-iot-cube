<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="(n%?Uv*Kox$Ni))9l@}F" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="P94jD|^9:X=E[K:ye#2f" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace LoRa {" line1="    let rxStack = [&quot;&quot;]" line2="    let eventStack = [&quot;&quot;]" line3="    export let message = &quot;&quot;" line4="" line5="    let status = 0" line6="    let FLAG_MSG_REQ = 0" line7="" line8="    serial.redirect(SerialPin.P8, SerialPin.P13, BaudRate.BaudRate115200)" line9="    serial.setRxBufferSize(32)" line10="" line11="    /**" line12="     * Communication" line13="     */" line14="" line15="    function writeSerial(command: string) {" line16="        serial.writeString(command + &quot;\r\n&quot;)" line17="    }" line18="" line19="    function readSerial(command: string) {" line20="        return serial.readString()" line21="    }" line22="" line23="    //% blockId=GetLatestMessage" line24="    //% block=&quot;Get serial message&quot;" line25="    //% advanced=true" line26="    export function getSerialMessage() {" line27="        return message" line28="    }" line29="" line30="    //% blockId=SerialListener" line31="    //% block=&quot;Serial Listener&quot;" line32="    //% advanced=true" line33="    export function serialListener(){" line34="        let rc = -1" line35="        if (FLAG_MSG_REQ == 0) {" line36="            let res = serial.readUntil(&quot;\r\n&quot;)" line37="            if (res.length &gt; 0) {" line38="                res = res.replace(&quot;\r\n&quot;, &quot;&quot;)" line39="                for(let i=0; i&lt;strRAK_RC.length; i++){" line40="                    if(res.includes(strRAK_RC[i])){" line41="                        rc = i" line42="                    }" line43="                }" line44="                if( rc == -1){" line45="                    if (res.includes(&quot;EVT&quot;)) {" line46="                        eventStack.push(res)" line47="                    }" line48="                    else {" line49="                        rxStack.push(res)" line50="                        message = res" line51="                    }" line52="                }" line53="            }" line54="        }" line55="    }" line56="" line57="    //% blockId=getRxStack" line58="    //% block=&quot;Get RX-Stack Item&quot;" line59="    //% advanced=true" line60="    export function getRxStack(){" line61="        return rxStack.pop()" line62="    }" line63="" line64="    //% blockId=writeATCommand" line65="    //% block=&quot;AT | Command %typ Paramter %value&quot;" line66="    //% advanced=true" line67="    export function writeATCommand(typ: string, value: string){" line68="        let command = &quot;AT+&quot; + typ + &quot;=&quot; + value" line69="        writeSerial(command)" line70="    }" line71="" line72="    //% blockId=getParameter" line73="    //% block=&quot;Get | Parameter %typ&quot;" line74="    //% advanced=false" line75="    export function getParameter(typ: eRUI3_PARAM) {" line76="        let command2 = &quot;AT+&quot; + strRAK_PARAM[typ] + &quot;=?&quot;       " line77="        writeSerial(command2)" line78="        basic.pause(100)" line79="        return message.replace(&quot;AT+&quot; + strRAK_PARAM[typ] + &quot;=&quot;, &quot;&quot;)" line80="    }" line81="" line82="" line83="    //% blockId=setParameter" line84="    //% block=&quot;Set | Parameter %typ to %value&quot;" line85="    //% advanced=false" line86="    export function setParameter(typ: eRUI3_PARAM, value: string) {" line87="        let command3 = &quot;AT+&quot; + strRAK_PARAM[typ] + &quot;=&quot; + value" line88="        writeSerial(command3)" line89="    }" line90="" line91="    /**" line92="     * Device Control" line93="     */" line94="    //% blockId=DeviceStatusSet" line95="    //% block=&quot;Set Device Status Bit %mask to %state&quot;" line96="    //% advanced=false" line97="    export function setStatus(mask: eSTATUS_MASK, state: number){" line98="        if (state){" line99="            status = status | mask" line100="        }" line101="        else {" line102="            status = status &amp; (~mask)" line103="        }" line104="    }" line105="" line106="    //% blockId=DeviceStatusGet" line107="    //% block=&quot;Get Device Status Bit %mask&quot;" line108="    //% advanced=true" line109="    export function getStatus(mask: eSTATUS_MASK) {" line110="        return (status &amp; mask)" line111="    }" line112="" line113="    //% blockId=DeviceReset" line114="    //% block=&quot;Reset LoRa Module&quot;" line115="    //% advanced=true" line116="    export function resetModule() {" line117="        writeSerial(&quot;ATZ&quot;)" line118="    }" line119="" line120="    //% blockId=DeviceSleep" line121="    //% block=&quot;LoRa Module sleep for %time ms&quot;" line122="    //% advanced=true" line123="    export function sleep(time: number) {" line124="        writeATCommand(&quot;SLEEP&quot;, time.toString())" line125="    }" line126="" line127="    //% blockId=DeviceConfigGet" line128="    //% block=&quot;Load Device config&quot;" line129="    //% advanced=false" line130="    export function getDeviceConfig(){" line131="        setStatus(eSTATUS_MASK.OTAA, parseInt(getParameter(eRUI3_PARAM.NJM)))" line132="        setStatus(eSTATUS_MASK.JOINED, parseInt(getParameter(eRUI3_PARAM.NJS)))" line133="        let confJoin = getParameter(eRUI3_PARAM.JOIN)" line134="        let strParam = confJoin.split(&quot;:&quot;)" line135="        let intParam = []" line136="        for(let j=0; j&lt;strParam.length; j++){" line137="            intParam[j] = parseInt(strParam[j])" line138="        }" line139="        setStatus(eSTATUS_MASK.AUTOJOIN, intParam[1])" line140="    }" line141="" line142="" line143="    /**" line144="     * Procedures" line145="     */" line146="" line147="    //% blockId=&quot;OTAASetup&quot;" line148="    //% block=&quot;OTAA Setup: AppEUI %AppEUI | DevEUI %DevEUI | AppKey %AppKey&quot;" line149="    export function OTAA_Setup(AppEUI: string, DevEUI: string, AppKey: string) {" line150="        setParameter(eRUI3_PARAM.NWM, &quot;1&quot;)              //Set work mode LoRaWAN" line151="        setParameter(eRUI3_PARAM.NJM, &quot;1&quot;)              //Set activation to OTAA" line152="        setParameter(eRUI3_PARAM.CLASS, &quot;A&quot;)            //Set class A" line153="        setParameter(eRUI3_PARAM.BAND, eBands.EU868.toString())     //Set band EU868" line154="        setParameter(eRUI3_PARAM.DEVEUI, DevEUI)" line155="        setParameter(eRUI3_PARAM.APPEUI, AppEUI)" line156="        setParameter(eRUI3_PARAM.APPKEY, AppKey)" line157="        basic.pause(300)" line158="        resetModule()" line159="    }" line160="    " line161="    //% blockId=&quot;Network_Join&quot;" line162="    //% block=&quot;LoRa Network Join | Join: %join | On Power-up: %auto_join&quot;" line163="    export function LoRa_Join(join: eBool, auto_join: eBool) {" line164="        writeATCommand(&quot;JOIN&quot;, join + &quot;:&quot; + auto_join + &quot;:10:8&quot;)" line165="    }" line166="" line167="    //% blockId=&quot;LoRa_Send_String&quot;" line168="    //% block=&quot;LoRa Send | string %data on channel %chanNum&quot;" line169="    export function LoRa_SendStr(data: string, chanNum: Channels,) {" line170="        writeATCommand(&quot;SEND&quot;, chanNum + &quot;:&quot; + data)" line171="    }" line172="" line173="    //% blockId=&quot;LoRa_Send_Number&quot;" line174="    //% block=&quot;LoRa Send | number %data on channel %chanNum&quot;" line175="    export function LoRa_SendInt(data: number, chanNum: Channels,) {" line176="        writeATCommand(&quot;SEND&quot;, chanNum + &quot;:&quot; + data)" line177="    }" line178="}" numlines="179"></mutation></block></statement></block></xml>